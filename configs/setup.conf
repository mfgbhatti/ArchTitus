# Archlinux System Automated Installer (ASAI) configuration file
#
# Most variables accept a single value others accept multiple values as annotated in the comments.
# Some variables are boolean and can be set to true or false.
# 0 means false, off or disabled.
# 1 means true, on or enabled.
#
#
#
# installation
# AUTO will handle installtion automatically or wizard asking questions
#
AUTO="0" # 1 or 0 (single)
#
# LOG generates a log file with the commands executed and output generated during installation.
## The log file is saved to /var/log/asai.log
LOG="1" #1 or 0 (single)
#
# partition
## DISK sets which is the device for the installation.
## LAYOUT sets the partition layout. None is for custom layout.
### LUKS_PASSWORD if set is the password for encrypt the device. With LVM, LVM on LUKS is used.
### LUKS_PATH is the path to the encrypted device.
### LVM_VG is the volume group for only LVM.
### LVM_PART_NUM is the number of volumess for LVM.
### LVM_NAMES is the names of the volumes for LVM.
### LVM_SIZE is the size of the volumes for LVM.
### BOOT_PARTITION is the boot partition.
### ROOT_PARTITION is the root partition.
## FILE_SYSTEM root device is formatted with this file system type.
## BTRFS_SUBVOLUMES allows to customize btrfs file system subvolumes mountpoints.
### Format (@name)
### root will always be @ and mounted at /
## UEFI or bios
## SSD or not
## MOUNTOPTION for eithrt ssd is true or false works only with btrfs.
#
DISK="/dev/sda" # /dev/sda  (single)
LAYOUT="btrfs"# btrfs lvm luks none single
LUKS_PASSWORD="" # only if luks is selected
LUKS_PATH="/dev/mapper/luks" # only if luks is selectedand only change last part of /dev/mapper/...
LVM_VG="MyVolGroup"
LVM_PART_NUM="1" #numbers
LVM_NAMES="root" 
LVM_SIZES=""
BOOT_PARTITION="" # /dev/sda1 /dev/nvme0n1p1 /dev/vda1 /dev/mmcblk0p1  only if layout is none (single)
ROOT_PARTITION="" # /dev/sda2 /dev/nvme0n1p2 /dev/vda2 /dev/mmcblk0p2 only if layout is none (single)
FILE_SYSTEM="btrfs" # btrfs ext2 ext3 ext4 f2fs jfs nilfs2 ntfs vfat xfs  (single)
BTRFS_SUBVOLUMES=(@ @home @var @tmp @.snapshots @swap) # (multiple)
UEFI="1" # 1 or 0 (single)
SSD="0" # 1 or 0 (single)
MOUNTOPTION="noatime,compress=zstd,commit=120" # noatime,compress=zstd,ssd,commit=120 noatime,compress=zstd,commit=120
#
# misc
## ROOT is lable for root partition.
## BOOT is lable for boot partition.
## MOUNTPOINT is the mountpoint for root partition.
ROOT="ROOT"
BOOT="EFIBOOT"
MOUNTPOINT="/mnt"
# configs
## Some variables for system configuration, from timezone, locale and keyboard to the user password.
## KEYMAP see https://man.archlinux.org/man/vconsole.conf.5
## KEYMAP sets keyboard layout.
## USER_PASSWORD  user password.
TIMEZONE="Europe/London"
LOCALES=""es_GB.UTF-8 UTF-8"" # double qoutes necessory
KEYMAP="uk"
USERNAME="asai"
HOSTNAME="archlinux"
USER_PASSWORD=""
#
# aur
## AURHELPER the AUR command to install in case some package requires it, only is installed if necessary.
AURHELPER="yay" # yay trizen aurman aura pikaur none (single)
#
# processor
## PROCESSOR is processor type.
## IMG is the image type for the processor.
PROCESSOR="intel" # intel amd
IMG="intel-ucode.img"#  intel-ucode.img amd-ucode.img

# display driver
## VGA installs a specific display driver, you must know which brand is the graphics hardware.
## for virtualbox or vmware use virtual
VGA="intel" # intel amd nvidia virtual (single)

# mkinitcpio
## HOOKS are the system hooks to execute to build the initial ramdisk.
## MODULES are used to specify the modules to load before anything to execute to build the initial ramdisk.
### Generally, it is not necessary to modify, alis enables or disables some hooks
### taking in account other variables values like bootloader or device encryption.
#
#when using LVM
HOOKS=(lvm2 filesystems)
#uncomit below when using LUKS
#HOOKS=(base udev autodetect keyboard keymap consolefont modconf block lvm2 encrypt filesystems fsck)
MODULES="" # add btrfs if you want to use btrfs in file system
#
# bootloader
## BOOTLOADER system boot loader.
BOOTLOADER="grub" # grub systemd efistub (single)
# only works if grub is selected. Please note it is case sensitive.
GRUBTHEME="CyberRe" # CyberRe Cyberpunk Shodan Vimix fallout None
THEMEDIR="/boot/grub/themes" # dont change if you dont understand.
#
# desktop
## DESKTOP installs a desktop environment.
DESKTOP="gnome" # gnome kde xfce mate lxqt minimal awesome openBox i3 i3-gaps deepin budgie
#
# packages
## PACKAGES is the list of packages to pacstrap.
PACKAGES=(base linux linux-firmware archlinux-keyring sudo)
#
#-----------------------------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------------------------

center() {
    width="$(tput cols)"
    padding="$(printf '%0.1s' \ {1..500})"
    printf '%*.*s %s %*.*s\n' 0 "$(((width - 2 - ${#1}) / 2))" "$padding" "$1" 0 "$(((width - 1 - ${#1}) / 2))" "$padding"
}

title() {
    echo " "
    INPUT="${1//\"/}"
    center "$INPUT"
    echo " "
}

logo() {
    clear
    center "         .8.            d888888o.           .8.           8 8888"
    center "        .888.         .'8888:' '88.        .888.          8 8888"
    center "       :88888.        8.'8888.   Y8       :88888.         8 8888"
    center "      . '88888.       '8.'8888.          . '88888.        8 8888"
    center "     .8. '88888.       '8.'8888.        .8. '88888.       8 8888"
    center "    .8'8. '88888.       '8.'8888.      .8'8. '88888.      8 8888"
    center "   .8' '8. '88888.       '8.'8888.    .8' '8. '88888.     8 8888"
    center "  .8'   '8. '88888.  8b   '8.'8888.  .8'   '8. '88888.    8 8888"
    center " .888888888. '88888. '8b.  ;8.'8888 .888888888. '88888.   8 8888"
    center ".8'       '8. '88888. 'Y8888P ,88P'.8'       '8. '88888.  8 8888"
    echo -ne "\n"
    center "                Archlinux System Automated Installer            "
    echo -ne "\n"
}


PROMPT="Please enter your option: "

set_option() {
    if [[ "$1" =~ "PACKAGES" ]]; then
        PACKAGES+=("${2}")
    elif grep -Eq "^${1}.*" "$CONFIG_FILE"; then
        sed -i -e "/^${1}.*/d" "$CONFIG_FILE"
    fi
    echo "${1}=${2}" >>"$CONFIG_FILE"
}

install_pkg() {
    for i in "$@"; do
        sudo pacman -S --noconfirm --needed "$i" >/dev/null 2>&1
        echo "Installing package: $i"
    done
}

install_aur() {
    for i in "$@"; do
        "$AURHELPER" -S --noconfirm --needed "$i" >/dev/null 2>&1
        echo "Installing AUR package: $i"
    done
}

invalid_option() {
    echo -ne "ERROR! Your selected option is invalid, retry... \n"
}

root_check() {
    if [[ "$(id -u)" != "0" ]]; then
        echo -ne "ERROR! This script must be run under the 'root' user!\n"
        exit 0
    fi
}

sudo_no_password() {
    sed -i 's/^# %wheel ALL=(ALL:ALL) NOPASSWD: ALL/%wheel ALL=(ALL:ALL) NOPASSWD: ALL/' "$1"
}

sudo_password() {
    sed -i 's/^%wheel ALL=(ALL:ALL) NOPASSWD: ALL/# %wheel ALL=(ALL:ALL) NOPASSWD: ALL/' "$1"
    sed -i 's/^# %wheel ALL=(ALL:ALL) ALL/%wheel ALL=(ALL:ALL) ALL/' "$1"
}

docker_check() {
    if awk -F/ '$2 == "docker"' /proc/self/cgroup | read -r; then
        echo -ne "ERROR! Docker container is not supported (at the moment)\n"
        exit 0
    elif [[ -f /.dockerenv ]]; then
        echo -ne "ERROR! Docker container is not supported (at the moment)\n"
        exit 0
    fi
}

arch_check() {
    if [[ ! -e /etc/arch-release ]]; then
        echo -ne "ERROR! This script must be run in Arch Linux!\n"
        exit 0
    fi
}

pacman_check() {
    if [[ -f /var/lib/pacman/db.lck ]]; then
        echo "ERROR! Pacman is blocked."
        echo -ne "If not running remove /var/lib/pacman/db.lck.\n"
        exit 0
    fi
}

connection_test() {
    ping -q -w 1 -c 1 "$(ip r | grep default | awk 'NR==1 {print $3}')" &>/dev/null && return 1 || return 0
}

mount_check() {
    [[ "$(grep -E "$MOUNTPOINT" /proc/mounts -c)" -ne 0 ]] && return 1 || return 0
}

elements_present() {
    for e in "${@:2}"; do [[ "$e" == "$1" ]] && break; done
}

processor_check() {
    PROC_TYPE="$(lscpu | grep "Vendor ID:" | awk '{print $3}' | head -1)"
    if [[ "$PROC_TYPE" =~ "GenuineIntel" ]]; then
        set_option "PROCESSOR" "intel"
        set_option "IMG" "intel-ucode.img"
    else
        set_option "PROCESSOR" "amd"
        set_option "IMG" "amd-ucode.img"
    fi
    set_option "PROC_TYPE" "$PROC_TYPE"
}

vga_check() {
    if [[ "$(lspci | grep -E '(NVIDIA|GeForce)' -c)" -gt "0" ]]; then
        set_option "VGA" "nvidia"
    elif [[ "$(lspci | grep -E '(Radeon|AMD)' -c)" -gt "0" ]]; then
        set_option "VGA" "amd"
    elif [[ "$(lspci | grep -E '(Integrated Graphics Controller|Intel Corporation UHD)' -c)" -gt "0" ]]; then
        set_option "VGA" "intel"
    elif [[ "$(lspci | grep -E '(VMware)' -c)" -gt "0" ]]; then
        set_option "VGA" "virtual"
    fi
}

set_ntp() {
    timedatectl set-ntp true
}

copy_logs() {
    echo "Copying logs"
    if [[ "$(find "$MOUNTPOINT"/var/log -type d | wc -l)" -ne 0 ]]; then
        cp -v "$LOG_FILE" "$MOUNTPOINT"/var/log/asai.log
    else
        echo -ne "ERROR! Log directory not found"
        exit 0
    fi
}

do_exit() {
    echo "unmounting $MOUNTPOINT"
    if [[ "$LVM" -eq "1" || "$LUKS" -eq "1" ]]; then
        i=0
        while [[ "$i" -le "${#LVM_NAMES[@]}" ]]; do
            umount -l /dev/"$LVM_VG"/"${LVM_NAMES[$i]}"
        done
    fi
    umount -R "$MOUNTPOINT"/boot
    umount -R "$MOUNTPOINT"
}

end() {
    copy_logs
    do_exit
}

background_checks() {
    root_check
    docker_check
    arch_check
    pacman_check
    if connection_test; then
        echo -ne "ERROR! There seems to be no internet connection.\n"
        exit 0
    elif mount_check; then
        echo -ne "ERROR! Mount point is busy\n"
        exit 0
    fi
    set_ntp
}

start_jobs() {
    pacman -Sy --noconfirm
    pacman -S terminus-font sudo --noconfirm --needed
    fc-cache -fv  >/dev/null 2>&1
    setfont ter-v22b
}

smart_checks() {
    vga_check
    processor_check
}
_TIMEZONE="$(curl --fail https://ipapi.co/timezone)"
