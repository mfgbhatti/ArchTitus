# Archlinux System Automated Installer (ASAI) configuration file
#
# Most variables accept a single value others accept multiple values as annotated in the comments.
# Some variables are boolean and can be set to true or false.
#
#
#
# installation
# AUTO will handle installtion automatically or wizard; asking questions about parameters
AUTO="0" # 1 means yes | 0 means no (single)
#
# partition
## DISK sets which is the device for the installation.
DISK="/dev/sda" # /dev/sda /dev/nvme0n1 /dev/vda1 /dev/mmcblk0  (single)
## BOOT_PARTITION is the boot partition.
BOOT_PARTITION="/dev/sda1" # /dev/sda1 /dev/nvme0n1p1 /dev/vda1 /dev/mmcblk0p1  (single)
## BOOT_SIZE is size for boot partition.
BOOT_SIZE="+512Mib" # same formate +numberM while Mib is MBs
## ROOT_PARTITION is the root partition.
ROOT_PARTITION="/dev/sda2" # /dev/sda2 /dev/nvme0n1p2 /dev/vda2 /dev/mmcblk0p2  (single)
## ROOT_SIZE is size for root partition.
BOOT_SIZE="-0" # same formate +numberG while Gib is GBs if "-0" is used means 100% of space.
## MANUAL_PART is for manual partitioning of disk into two partitions boot and root
## do not use it IF YOU ARE NOT USING WIZARD.
MANUAL_PART="0" # 1 means yes | 0 means no (single)
## LAYOUT sets the partition layout. None is for custom layout.
LAYOUT="btrfs" # btrfs lvm luks none (single)
### LUKS_PASSWORD if set is the password for encrypt the device. With LVM, LVM on LUKS is used.
LUKS_PASSWORD="" # only if luks is selected as LAYOUT
### LUKS_PATH is the path to the encrypted device.
LUKS_PATH="luks" # only if luks is selected as LAYOUT
### LVM_VG is the volume group for only LVM.
LVM_VG="MyVolGroup"
### LVM_PART_NUM is the number of volumess for LVM.
LVM_PART_NUM="1" # quantity in numbers
### LVM_NAMES is the names of the volumes for LVM.
LVM_NAMES=(root) # if only one name is passed, LVM_SIZES will be considered to 100%FREE that means whole partition.
### LVM_SIZE is the size of the volumes for LVM.
LVM_SIZES=() # please make sure to pass size relativeto name i.e. LVM_NAMES[0] with LVM_SIZES[0] so on and so forth.
## FILE_SYSTEM root device is formatted with this file system type.
FILE_SYSTEM="btrfs" # btrfs ext2 ext3 ext4 f2fs jfs nilfs2 ntfs vfat xfs (single)
### BTRFS_SUBVOLUMES allows to customize btrfs file system subvolumes mountpoints.
### Format (@name)
### root will always be @ and mounted at /
BTRFS_SUBVOLUMES=(@ @home @var @tmp @.snapshots) # (multiple) only if LAYOUT is btrfs
## MOUNTOPTION for eithrt ssd is true or false works only with btrfs as LAYOUT
MOUNTOPTION="noatime,compress=zstd,commit=120" # noatime,compress=zstd,ssd,commit=120 if ssd is present elese noatime,compress=zstd,commit=120
## UEFI or bios
UEFI="1" # 1 means yes | 0 means no (single)
## SSD or not
SSD="0" # 1 means yes | 0 means no (single)
#
# misc
## ROOT is lable for root partition.
ROOT="ROOT"
## BOOT is lable for boot partition.
BOOT="EFIBOOT"
## MOUNTPOINT is the mountpoint for root partition.
MOUNTPOINT="/mnt"
# configs
## Some variables for system configuration, from timezone, locale and keyboard to the user password.
TIMEZONE="Europe/London"
## KEYMAP see https://man.archlinux.org/man/vconsole.conf.5
## KEYMAP sets keyboard layout.
KEYMAP="uk"
## LOCALE used for correctly displaying regional monetary values, time and date formats
LOCALE="en_GB"
## USER_NAME is handling user name to be created
USERNAME="asai"
## USER_PASSWORD is handling user password.
USER_PASSWORD=""
## HOSTNAME is handling machine name
HOSTNAME="archlinux"
#
# aur
## AURHELPER the AUR command to install in case some package requires it, only is installed if necessary.
AURHELPER="yay" # yay trizen aurman aura pikaur none (single)
#
# processor
## PROCESSOR is processor type. This is used for microcode. Visit https://wiki.archlinux.org/title/microcode
## for more information
PROCESSOR="intel" # intel or amd (single)
## SWAP is handling making swap file on the system.
SWAP="0" # 1 means yes | 0 means no (single)
## CPU_CORES is the number of cores.
CPU_CORES=""
#
# display driver
## VGA installs a specific display driver, you must know which brand is the graphics hardware.
## for virtualbox, kvm or vmware it will install dependencies or driver if required
VGA="intel" # intel amd nvidia oracle kvm vmware (single)
#
# mkinitcpio
## HOOKS are the system hooks to execute to build the initial ramdisk.
## MODULES are used to specify the modules to load before anything to execute to build the initial ramdisk.
### Generally, it is not necessary to modify, alis enables or disables some hooks
### taking in account other variables values like bootloader or device encryption.
#
HOOKS=()
# uncomment below when using LVM
#HOOKS=(lvm2 filesystems)
# uncomment below when using LUKS
#HOOKS=(base udev autodetect keyboard keymap consolefont modconf block lvm2 encrypt filesystems fsck)
MODULES="btrfs" # only if you want to use btrfs in file system (single)
#
# bootloader
## BOOTLOADER system boot loader.
BOOTLOADER="grub" # grub systemd efistub (single)
# only works if grub is selected. Please note it is case sensitive.
GRUBTHEME="CyberRe"          # CyberRe Cyberpunk Shodan Vimix Xenlism None (single)
THEMEDIR="/boot/grub/themes" # dont change if you dont understand. (single)
#
# desktop
## DESKTOP installs a desktop environment.
DESKTOP="gnome" # gnome kde xfce mate lxqt minimal awesome openBox i3 i3-gaps deepin budgie (single)
#
# packages
## PACKAGES is the list of packages to pacstrap.
## please add a kernel from linux, linux-lts, linux-hardened linux-zen
## also add lvm2 for lvm and lvm2, cryptsetup for luks
## You need to add xfsprogs, btrfs-progs, f2fs-tools, jfsutils, nilfs-utils and ntfs-3g
## for xfs, btrfs, f2fs, jfs, nilfs and ntfs file systems respectively.
PACKAGES=(base linux-firmware archlinux-keyring sudo) # (multiple)
# KERNEL_POSTFIX is handling booloader enteries for kernel
## if linux is selected leavce it blank
## depending on other please add postfix because it is necessory for bootloader
KERNEL_POSTFIX="" # -lts -hardened -zen (single)
## SERVICES is the list of services to enable.
SERVICES=(cups cronie ntpd NetworkManager bluetooth) # (multiple)

#
#-----------------------------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------------------------

center() {
    width="$(tput cols)"
    padding="$(printf '%0.1s' \ {1..500})"
    printf '%*.*s %s %*.*s\n' 0 "$(((width - 2 - ${#1}) / 2))" "$padding" "$1" 0 "$(((width - 1 - ${#1}) / 2))" "$padding"
}

title() {
    echo " "
    INPUT="${1//\"/}"
    center "$INPUT"
    echo " "
}

logo() {
    clear
    center "         .8.            d888888o.           .8.           8 8888"
    center "        .888.         .'8888:' '88.        .888.          8 8888"
    center "       :88888.        8.'8888.   Y8       :88888.         8 8888"
    center "      . '88888.       '8.'8888.          . '88888.        8 8888"
    center "     .8. '88888.       '8.'8888.        .8. '88888.       8 8888"
    center "    .8'8. '88888.       '8.'8888.      .8'8. '88888.      8 8888"
    center "   .8' '8. '88888.       '8.'8888.    .8' '8. '88888.     8 8888"
    center "  .8'   '8. '88888.  8b   '8.'8888.  .8'   '8. '88888.    8 8888"
    center " .888888888. '88888. '8b.  ;8.'8888 .888888888. '88888.   8 8888"
    center ".8'       '8. '88888. 'Y8888P ,88P'.8'       '8. '88888.  8 8888"
    echo -ne "\n"
    center "                Archlinux System Automated Installer            "
    echo -ne "\n"
}

PROMPT="Please enter your option: "

set_option() {
    if [[ "$1" =~ ^(PACKAGES|SERVICES)$ ]]; then
        sed -i -E "/$1=/s/\)/\ $2\)/" "$CONFIG_FILE"
    elif grep -Eq "^$1=\"(.*?)\"" "$CONFIG_FILE"; then
        sed -i -E 's#^'"$1"'="(.*?)"#'"$1"'='"\"$2\""'#' "$CONFIG_FILE"
    elif grep -Eq "^$1=\(([^()]*)\)" "$CONFIG_FILE"; then
        sed -i -E "s#^$1=\(([^)]+)\)#$1=$2#" "$CONFIG_FILE"
    else
        echo "ERROR! $1 cannot be updated"
    fi
}

install_pkg() {
    for i in "$@"; do
        sudo pacman -S --noconfirm --needed "$i" >/dev/null 2>&1
        echo "Installing package: $i"
    done
}

install_aur() {
    for i in "$@"; do
        "$AURHELPER" -S --noconfirm --needed "$i" >/dev/null 2>&1
        echo "Installing AUR package: $i"
    done
}

invalid_option() {
    echo -ne "ERROR! Your selected option is invalid, retry... \n"
}

root_check() {
    if [[ "$(id -u)" != "0" ]]; then
        echo -ne "ERROR! ASAI must be run under the 'root' user!\n"
        exit 0
    fi
}

docker_check() {
    if awk -F/ '$2 == "docker"' /proc/self/cgroup | read -r; then
        echo -ne "ERROR! Docker container is not supported by ASAI.\n"
        exit 0
    elif [[ -f /.dockerenv ]]; then
        echo -ne "ERROR! Docker container is not supported by ASAI.\n"
        exit 0
    fi
}

arch_check() {
    if [[ ! -e /etc/arch-release ]]; then
        echo -ne "ERROR! ASAI must be run in Arch Linux!\n"
        exit 0
    fi
}

pacman_check() {
    DB_LOCK='/var/lib/pacman/db.lck'
    if [[ -f "$DB_LOCK" ]]; then
        echo "ERROR! Pacman is already running, waiting maximum 10 minutes for it to terminate."
        STARTED="$(date +%s)"
        while [[ -f "$DB_LOCK" ]]; do
            sleep 0.25
            if [[ "$(($(date +%s) - STARTED))" -gt $((60 * 10)) ]]; then
                echo "ERROR! Pre-existing pacman lock never exited. Please clean up any existing pacman sessions before using ASAI."
                exit 0
            fi
        done
    fi
}

connection_test() {
    ping -q -w 1 -c 1 "$(ip r | grep default | awk 'NR==1 {print $3}')" &>/dev/null && return 1 || return 0
}

mount_check() {
    [[ "$(grep -E "$MOUNTPOINT" /proc/mounts -c)" -eq "0" ]] && return 1 || return 0
}

efi() {
    [[ -d "/sys/firmware/efi/" ]] && return 0 || return 1
}

elements_present() {
    for e in "${@:2}"; do [[ "$e" == "$1" ]] && break; done
}

processor_check() {
    PROC_TYPE="$(lscpu | grep "Vendor ID:" | awk '{print $3}' | head -1)"
    if [[ "$PROC_TYPE" =~ "GenuineIntel" ]]; then
        set_option "PROCESSOR" "intel"
    else
        set_option "PROCESSOR" "amd"
    fi
}

vga_check() {
    VIRTUAL=$(systemd-detect-virt)
    if [[ "$(lspci | grep -E '(NVIDIA|GeForce)' -c)" -gt "0" ]]; then
        set_option "VGA" "nvidia"
    elif [[ "$(lspci | grep -E '(Radeon|AMD)' -c)" -gt "0" ]]; then
        set_option "VGA" "amd"
    elif [[ "$(lspci | grep -E '(Integrated Graphics Controller|Intel Corporation UHD)' -c)" -gt "0" ]]; then
        set_option "VGA" "intel"
    else
        set_option "VGA" "$VIRTUAL"
    fi
}
sudo_no_password() {
    sed -i 's/^# %wheel ALL=(ALL:ALL) NOPASSWD: ALL/%wheel ALL=(ALL:ALL) NOPASSWD: ALL/' "$1"
}

sudo_password() {
    sed -i 's/^%wheel ALL=(ALL:ALL) NOPASSWD: ALL/# %wheel ALL=(ALL:ALL) NOPASSWD: ALL/' "$1"
    sed -i 's/^# %wheel ALL=(ALL:ALL) ALL/%wheel ALL=(ALL:ALL) ALL/' "$1"
}

numbers_check() {
    [[ "$1" =~ ^[[:digit:]]+$ ]] && return 0 || return 1
}

set_part() {
    echo -ne "WARNING: THIS MAY FORMAT AND DELETE ALL DATA ON THE DISK\n"
    echo -ne "If you need more partitions like home etc. Please do them after installation\n"
    if efi; then
        read -r -p "Enter boot partition size MBs (only numbers) [recommended 100-500] : " BOOTSIZE
    fi
    read -r -p "Enter root partition size GBS (only numbers): " ROOTSIZE
    if numbers_check "$BOOTSIZE"; then
        NEWSIZE=+"$BOOTSIZE"Mib
        set_option "BOOT_SIZE" "$NEWSIZE"
    else
        invalid_option
        set_part
    fi
    if numbers_check "$ROOTSIZE"; then
        NEWSIZE=+"$ROOTSIZE"Gib
        set_option "ROOT_SIZE" "$NEWSIZE"
    else
        invalid_option
        set_part
    fi
}

set_btrfs() {
    echo "Please enter your btrfs subvolumes separated by space"
    echo "usualy they start with @."
    echo "[like @home, default are @home, @var, @tmp, @.snapshots]"
    echo " "
    read -r -p "press enter to use default: " -a ARR
    if [[ -z "${ARR[*]}" ]]; then
        set_option "BTRFS_SUBVOLUMES" "(@ @home @var @tmp @.snapshots)"
    else
        NAMES=(@)
        for i in "${ARR[@]}"; do
            if [[ $i =~ [@] ]]; then
                NAMES+=("$i")
            else
                NAMES+=(@"${i}")
            fi
        done
        IFS=" " read -r -a SUBS <<<"$(tr ' ' '\n' <<<"${NAMES[@]}" | awk '!x[$0]++' | tr '\n' ' ')"
        set_option "BTRFS_SUBVOLUMES" "${SUBS[*]}"
    fi
}

set_lvm() {
    # needs cleaning
    read -r -p "Name your lvm volume group [like MyVolGroup, default is MyVolGroup]: " _VG
    if [[ -z "$_VG" ]]; then
        _VG="MyVolGroup"
    fi
    read -r -p "Enter number of partitions [like 2, default is 1]: " _PART_NUM
    echo "Please make sure 1st partition is considered as root partition"
    echo "And will be mounted at /mnt/ and other partitions will be mounted"
    echo "at /mnt/partition_name by making a directory /mnt/partition_name"

    i=1
    _LVM_NAMES=()
    LVM_SIZES=()
    if [[ -z "$_PART_NUM" ]]; then
        _PART_NUM=1
        _LVM_NAMES+=("root")
        i=2
    fi
    while [[ $i -le "$_PART_NUM" ]]; do
        if [[ "$i" -eq "$_PART_NUM" ]]; then
            read -r -p "Enter last partition name [like home]: " _LVM_NAME
            echo "The size will be remaining space on the disk"
            _LVM_NAMES+=("$_LVM_NAME")
        else
            read -r -p "Enter $i partition name [like root]: " _LVM_NAME
            _LVM_NAMES+=("$_LVM_NAME")
            read -r -p "Enter $i partition size [like 25G, 200M]: " _LVM_SIZE
            LVM_SIZES+=("$_LVM_SIZE")
        fi
        i=$((i + 1))
    done
    IFS=" " read -r -a LVM_NAMES <<<"$(tr ' ' '\n' <<<"${_LVM_NAMES[@]}" | awk '!x[$0]++' | tr '\n' ' ')"
    set_option "LVM_VG" "$_VG"
    set_option "LVM_PART_NUM" "$_PART_NUM"
    set_option "LVM_NAMES" "(${LVM_NAMES[*]})"
    set_option "LVM_SIZES" "(${LVM_SIZES[*]})"
}

do_curl() {
    _ISO=$(curl --silent  --fail https://ifconfig.co/country-iso)
    set_option "ISO" "$_ISO"
}

hardware_check() {
    _MEM="$(grep -i "memtotal" "/proc/meminfo" | grep -o '[[:digit:]]*')"
    _CPU="$(grep -c ^processor /proc/cpuinfo)"
    if [[ $TOTALMEM -lt 8000000 ]]; then
        set_option "SWAP" "1"
    else
        set_option "SWAP" "0"
    fi
    set_option "CPU_CORES" "$_CPU"
}

efi_check() {
    if efi; then
        set_option "UEFI" 1
    else
        set_option "UEFI" 0
    fi
}

set_password() {
    read -rs -p "Please enter password: " PASSWORD1
    echo -ne "\n"
    read -rs -p "Please re-enter password: " PASSWORD2
    echo -ne "\n"
    if [[ "$PASSWORD1" == "$PASSWORD2" ]]; then
        set_option "$1" "$PASSWORD1"
    else
        echo -ne "ERROR! Passwords do not match. \n"
        set_password
    fi
}

set_ntp() {
    timedatectl set-ntp true
}

copy_logs() {
    echo "Copying logs"
    if [[ "$(find "$MOUNTPOINT"/var/log -type d | wc -l)" -ne 0 ]]; then
        cp -v "$LOG_FILE" "$MOUNTPOINT"/var/log/asai.log
    else
        echo -ne "ERROR! Log directory not found"
        exit 0
    fi
}

remove() {
    for i in $LUKS_PASSWORD $USER_PASSWORD; do
        if [[ -n $i ]]; then
            echo "Erasing passwords from $CONFIG_FILE"
            sed -i -E "s/$i//g" "$CONFIG_FILE"
        fi
    done
}

do_exit() {
    echo "unmounting $MOUNTPOINT"
    if [[ "$LVM" -eq "1" || "$LUKS" -eq "1" ]]; then
        i=0
        while [[ "$i" -le "${#LVM_NAMES[@]}" ]]; do
            umount -l /dev/"$LVM_VG"/"${LVM_NAMES[$i]}"
        done
    fi
    umount -R "$MOUNTPOINT"/boot
    umount -R "$MOUNTPOINT"
}

end_jobs() {
    JOBS=("remove" "copy_logs" "do_exit")
    for JOB in "${JOBS[@]}"; do
        "$JOB"
    done
}

background_checks() {
    CHECKS=("root_check" "docker_check" "arch_check" "pacman_check" "set_ntp")
    for CHECK in "${CHECKS[@]}"; do
        "$CHECK"
    done
    if connection_test; then
        echo -ne "ERROR! There seems to be no internet connection.\n"
        exit 0
    elif mount_check; then
        echo -ne "ERROR! $MOUNTPOINT is busy\n"
        exit 0
    fi
}

start_jobs() {
    pacman -Sy --noconfirm >/dev/null 2>&1
    pacman -S terminus-font sudo --noconfirm --needed >/dev/null 2>&1
    fc-cache -fv >/dev/null 2>&1
    setfont ter-v22b
}

smart_checks() {
    vga_check
    processor_check
}
_TIMEZONE="$(curl --silent --fail https://ipapi.co/timezone)"
