#!/usr/bin/env bash
# shellcheck disable=SC1090,SC2034

center() {
    width="$(tput cols)"
    padding="$(printf '%0.1s' \ {1..500})"
    printf '%*.*s %s %*.*s\n' 0 "$(((width - 2 - ${#1}) / 2))" "$padding" "$1" 0 "$(((width - 1 - ${#1}) / 2))" "$padding"
}

title() {
    echo " "
    INPUT="${1//\"/}"
    center "$INPUT"
    echo " "
}

logo() {
    center "         .8.            d888888o.           .8.           8 8888"
    center "        .888.         .'8888:' '88.        .888.          8 8888"
    center "       :88888.        8.'8888.   Y8       :88888.         8 8888"
    center "      . '88888.       '8.'8888.          . '88888.        8 8888"
    center "     .8. '88888.       '8.'8888.        .8. '88888.       8 8888"
    center "    .8'8. '88888.       '8.'8888.      .8'8. '88888.      8 8888"
    center "   .8' '8. '88888.       '8.'8888.    .8' '8. '88888.     8 8888"
    center "  .8'   '8. '88888.  8b   '8.'8888.  .8'   '8. '88888.    8 8888"
    center " .888888888. '88888. '8b.  ;8.'8888 .888888888. '88888.   8 8888"
    center ".8'       '8. '88888. 'Y8888P ,88P'.8'       '8. '88888.  8 8888"
    echo -ne "\n"
    center "                Archlinux System Automated Installer            "
    echo -ne "\n"
}


PROMPT="Please enter your option: "

set_option() {
    if grep -Eq "^${1}.*" "$CONFIG_FILE"; then
        sed -i -e "/^${1}.*/d" "$CONFIG_FILE"
    fi
    echo "${1}=${2}" >>"$CONFIG_FILE"
}

do_pacstrap() {
    pacstrap "$1" "$@" --noconfirm --needed >/dev/null 2>&1
}

install_pkg() {
    sudo pacman -S --noconfirm --needed "$@" >/dev/null 2>&1
}

install_aur() {
    "$AURHELPER" -S --noconfirm --needed "$@" /dev/null 2>&1
}

invalid_option() {
    echo -ne "ERROR! Your selected option is invalid, retry... \n"
}

root_check() {
    if [[ "$(id -u)" != "0" ]]; then
        echo -ne "ERROR! This script must be run under the 'root' user!\n"
        exit 0
    fi
}

sudo_no_password() {
    sed -i 's/^# %wheel ALL=(ALL:ALL) NOPASSWD: ALL/%wheel ALL=(ALL:ALL) NOPASSWD: ALL/' "$1"
}

sudo_password() {
    sed -i 's/^%wheel ALL=(ALL:ALL) NOPASSWD: ALL/# %wheel ALL=(ALL:ALL) NOPASSWD: ALL/' "$1"
    sed -i 's/^# %wheel ALL=(ALL:ALL) ALL/%wheel ALL=(ALL:ALL) ALL/' "$1"
}

docker_check() {
    if awk -F/ '$2 == "docker"' /proc/self/cgroup | read -r; then
        echo -ne "ERROR! Docker container is not supported (at the moment)\n"
        exit 0
    elif [[ -f /.dockerenv ]]; then
        echo -ne "ERROR! Docker container is not supported (at the moment)\n"
        exit 0
    fi
}

arch_check() {
    if [[ ! -e /etc/arch-release ]]; then
        echo -ne "ERROR! This script must be run in Arch Linux!\n"
        exit 0
    fi
}

pacman_check() {
    if [[ -f /var/lib/pacman/db.lck ]]; then
        echo "ERROR! Pacman is blocked."
        echo -ne "If not running remove /var/lib/pacman/db.lck.\n"
        exit 0
    fi
}

connection_test() {
    ping -q -w 1 -c 1 "$(ip r | grep default | awk 'NR==1 {print $3}')" &>/dev/null && return 1 || return 0
}

mount_check() {
    [[ "$(grep -E "$MOUNTPOINT" /proc/mounts -c)" -ne 0 ]] && return 1 || return 0
}

elements_present() {
    for e in "${@:2}"; do [[ "$e" == "$1" ]] && break; done
}

write_to_config() {
    set_option "ROOT" "ROOT"
    set_option "BOOT" "EFIBOOT"
    set_option "MOUNTPOINT" "/mnt"
}

set_ntp() {
    timedatectl set-ntp true
}

background_checks() {
    root_check
    docker_check
    arch_check
    pacman_check
    if connection_test; then
        echo -ne "ERROR! There seems to be no internet connection.\n"
        exit 0
    elif ! mount_check; then
        echo -ne "ERROR! Mount point is busy\n"
        exit 0
    fi
    set_ntp
}

copy_logs() {
    echo "Copying logs"
    if [[ "$(find "$MOUNTPOINT"/var/log -type d | wc -l)" -ne 0 ]]; then
        cp -v "$LOG_FILE" "$MOUNTPOINT"/var/log/asai.log
    else
        echo -ne "ERROR! Log directory not found"
        exit 0
    fi
}

do_exit() {
    echo "unmounting $MOUNTPOINT"
    if [[ "$LVM" -eq "1" || "$LUKS" -eq "1" ]]; then
        i=0
        while [[ "$i" -le "${#LVM_NAMES[@]}" ]]; do
            umount -l /dev/"$LVM_VG"/"${LVM_NAMES[$i]}"
        done
    fi
    umount -R "$MOUNTPOINT"/boot
    umount -R "$MOUNTPOINT"
}

end() {
    copy_logs
    do_exit
}

start_jobs() {
    pacman -Sy --noconfirm >/dev/null 2>&1
    install_pkg terminus-font
    fc-cache -fv >/dev/null 2>&1
    setfont ter-v22b
}
_TIMEZONE="$(curl --fail https://ipapi.co/timezone)"