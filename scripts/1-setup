#!/usr/bin/env bash
# shellcheck disable=SC1090

SCRIPT_DIR="$HOME/asai"

CONFIG_FILE="$SCRIPT_DIR"/configs/setup.conf

source_setup() {
    if [[ -f "$CONFIG_FILE" ]]; then
        source "$CONFIG_FILE"
    else
        echo "ERROR! Missing file: $CONFIG_FILE"
        exit 0
    fi
}

source_setup

install_pkg vim dhclient reflector \
    base-devel wget rsync git pacman-contrib \
    curl efibootmgr

install_xorg() {
    install_pkg xorg xorg-server xorg-xinit
}

install_services() {
    install_pkg cups bluez bluez-utils networkmanager cronie ntp dhcpcd
}

if [[ $TOTALMEM -gt 8000000 ]]; then
    echo "Changing makepkg.conf for $CPU_CORES cores"
    sed -i "s/#MAKEFLAGS=\"-j2\"/MAKEFLAGS=\"-j$CPU_CORES\"/g" /etc/makepkg.conf
    sed -i "s/COMPRESSXZ=(xz -c -z -)/COMPRESSXZ=(xz -c -T $CPU_CORES -z -)/g" /etc/makepkg.conf
fi

echo "Setup Language and set locale"
hwclock --systohc
sed -i '/'"${LOCALE}"'/s/^#//' /etc/locale.gen
locale-gen
timedatectl --no-ask-password set-timezone "$TIMEZONE"
timedatectl --no-ask-password set-ntp 1
localectl --no-ask-password set-locale LANG="${LOCALE}.UTF-8" LC_TIME="${LOCALE}.UTF-8"
localectl --no-ask-password set-keymap --no-convert "$KEYMAP"

sudo_no_password "/etc/sudoers"

echo "Installing desktop: $DESKTOP"
if [[ "$DESKTOP" =~ "minimal" ]]; then
    install_xorg
else
    install_xorg
    install_services
fi
case "$DESKTOP" in
"kde")
    install_pkg plasma kf5 sddm plasma-wayland-session
    set_option "SERVICES" "sddm"
    ;;
"gnome")
    install_pkg gnome gnome-extra gnome-software gnome-initial-setup gnome-tweak-tool gnome-power-manager
    set_option "SERVICES" "gdm"
    ;;
"xfce")
    install_pkg xfce4 xfce4-goodies lightdm lightdm-gtk-greeter pavucontrol pulseaudio
    set_option "SERVICES" "lightdm"
    ;;
"mate")
    install_pkg mate mate-extra lightdm lightdm-gtk-greeter
    set_option "SERVICES" "lightdm"
    ;;
"lxqt")
    install_pkg lxqt breeze-icons sddm
    set_option "SERVICES" "sddm"
    ;;
"openbox")
    install_pkg openbox obconf xterm lightdm lightdm-gtk-greeter
    set_option "SERVICES" "lightdm"
    ;;
"awesome")
    install_pkg awesome vicious xterm lightdm lightdm-gtk-greeter
    set_option "SERVICES" "lightdm"
    ;;
"minimal")
    ;;
"i3")
    install_pkg i3-wm i3blocks i3lock i3status dmenu rxvt-unicode lightdm lightdm-gtk-greeter
    set_option "SERVICES" "lightdm"
    ;;
"i3-gaps")
    install_pkg i3-gaps i3blocks i3lock i3status dmenu rxvt-unicode lightdm lightdm-gtk-greeter
    set_option "SERVICES" "lightdm"
    ;;
"deepin")
    install_pkg deepin deepin-extra deepin-kwin
    sed -i 's/^#greeter-session=.*/greeter-session=lightdm-deepin-greeter/' /etc/lightdm/lightdm.conf
    set_option "SERVICES" "lightdm"
    ;;
"budgie")
    install_pkg budgie-desktop budgie-desktop-view budgie-screensaver gnome-control-center network-manager-applet gnome
    set_option "SERVICES" "gdm"
    ;;
*)
    echo "Unsupported desktop environment"
    exit 0
    ;;

esac

case "$PROCESSOR" in
"intel")
    install_pkg intel-ucode
    ;;
"amd")
    install_pkg amd-ucode
    ;;
*)
    echo "ERROR: Unknown processor type"
    exit 0
    ;;
esac

case "$VGA" in
"intel")
    echo "Installing Intel graphics"
    install_pkg xf86-video-intel vulkan-radeon mesa-libgl mesa-vdpau libvdpau-va-gl
    ;;
"amd")
    echo "Installing AMD graphics"
    install_pkg xf86-video-amdgpu mesa-libgl mesa-vdpau libvdpau-va-gl
    ;;
"nvidia")
    echo "Installing NVIDIA graphics"
    iinstall_pkg nvidia nvidia-utils libglvnd
    ;;
"oracle")
    echo "Installing for virtualbox"
    install_pkg xf86-video-vmware virtualbox-guest-utils mesa-libgl
    ;;
"vmware")
    echo "Installing for vmware"
    install_pkg xf86-video-vmware open-vm-tools
    ;;
"kvm")
    echo "Installing for kvm"
    install_pkg qemu-guest-agent
    ;;
*)
    echo "ERROR! Unknown graphics card"
    ;;
esac

PARTITION_UUID=$(blkid -s UUID -o value "$PART2")
PARTITION_PARTUUID=$(blkid -s PARTUUID -o value "$PART2")

case "$BOOTLOADER" in
"grub")
    echo "Installing GRUB"
    install_pkg grub os-prober
    if [[ "$LAYOUT" =~ "luks" ]]; then
        echo "Installing GRUB for LUKS"
        sed -i -e 's/GRUB_CMDLINE_LINUX="\(.\+\)"/GRUB_CMDLINE_LINUX="\1 cryptdevice=UUID='"${PARTITION_UUID}"':luks"/g' -e 's/GRUB_CMDLINE_LINUX=""/GRUB_CMDLINE_LINUX="cryptdevice=UUID='"${PARTITION_UUID}"':luks"/g' /etc/default/grub
    fi
    if [[ "$UEFI" -eq "1" ]]; then
        grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=ArchLinux
    else
        grub-install --target=i386-pc "$DISK"
    fi
    grub-mkconfig -o /boot/grub/grub.cfg
    ;;
"systemd")
    if [[ "$UEFI" -eq "1" ]]; then
        echo "Installing systemd-boot"
        bootctl --path=/boot install
        case "$LAYOUT" in
        "btrfs")
            echo -e "title\tArchLinux\nlinux\t/vmlinuz-linux\ninitrd\t/initramfs-linux.img\ninitrd\t/$PROCESSOR-ucode.img\noptions\troot=PARTUUID=$PARTITION_PARTUUID rw rootflags=subvol=@" >/boot/loader/entries/arch.conf
            ;;
        "lvm")
            echo -e "title\tArchLinux\nlinux\t/vmlinuz-linux\ninitrd\t/initramfs-linux.img\ninitrd\t/$PROCESSOR-ucode.img\noptions\troot=/dev/$LVM_VG/${LVM_NAMES[0]} rw" >/boot/loader/entries/arch.conf
            ;;
        "luks")
            echo -e "title\tArchLinux\nlinux\t/vmlinuz-linux\ninitrd\t/initramfs-linux.img\ninitrd\t/$PROCESSOR-ucode.img\noptions\tcryptdevice=UUID=$PARTITION_UUID:luks root=/dev/$LVM_VG/${LVM_NAMES[0]} rw" >/boot/loader/entries/arch.conf
            ;;
        "none")
            echo -e "title\tArchLinux\nlinux\t/vmlinuz-linux\ninitrd\t/initramfs-linux.img\ninitrd\t/$PROCESSOR-ucode.img\noptions\troot=PARTUUID=$PARTITION_PARTUUID rw" >/boot/loader/entries/arch.conf
            ;;
        *)
            echo "ERROR! Systemd-boot is not supported for BIOS systems"
            exit 0
            ;;
        esac
        echo -e "default  arch\ntimeout\t5" >/boot/loader/loader.conf
    fi
    ;;
"efistub")
    if [[ "$UEFI" -eq "1" ]]; then
        echo "Installing efistub"
        case "$LAYOUT" in
        "btrfs")
            efibootmgr --disk "$DISK" --part 1 --create --label "ArchLinux-Fallback" --loader "/vmlinuz-linux" --unicode "root=PARTUUID=$PARTITION_PARTUUID rw rootflags=subvol=@ initrd=\\$PROCESSOR-ucode.img initrd=\initramfs-linux-fallback.img"
            efibootmgr --disk "$DISK" --part 1 --create --label "ArchLinux" --loader "/vmlinuz-linux" --unicode "root=PARTUUID=$PARTITION_PARTUUID rw rootflags=subvol=@ initrd=\\$PROCESSOR-ucode.img initrd=\initramfs-linux.img"
            ;;
        "lvm")
            efibootmgr --disk "$DISK" --part 1 --create --label "ArchLinux-Fallback" --loader "/vmlinuz-linux" --unicode "root=/dev/$LVM_VG/${LVM_NAMES[0]} rw initrd=\\$PROCESSOR-ucode.img initrd=\initramfs-linux-fallback.img"
            efibootmgr --disk "$DISK" --part 1 --create --label "ArchLinux" --loader "/vmlinuz-linux" --unicode "root=/dev/$LVM_VG/${LVM_NAMES[0]} rw initrd=\\$PROCESSOR-ucode.img initrd=\initramfs-linux.img"
            ;;
        "luks")
            efibootmgr --disk "$DISK" --part 1 --create --label "ArchLinux-Fallback" --loader "/vmlinuz-linux" --unicode "cryptdevice=PARTUUID=$PARTITION_PARTUUID:luks:allow-discards root=/dev/$LVM_VG/${LVM_NAMES[0]} rw initrd=\\$PROCESSOR-ucode.img initrd=\initramfs-linux-fallback.img"
            efibootmgr --disk "$DISK" --part 1 --create --label "ArchLinux" --loader "/vmlinuz-linux" --unicode "cryptdevice=PARTUUID=$PARTITION_PARTUUID:luks:allow-discards root=/dev/$LVM_VG/${LVM_NAMES[0]} rw initrd=\\$PROCESSOR-ucode.img initrd=\initramfs-linux.img"
            ;;
        "none")
            efibootmgr --disk "$DISK" --part 1 --create --label "ArchLinux-Fallback" --loader "/vmlinuz-linux" --unicode "root=PARTUUID=$PARTITION_PARTUUID rw initrd=\\$PROCESSOR-ucode.img initrd=\initramfs-linux-fallback.img"
            efibootmgr --disk "$DISK" --part 1 --create --label "ArchLinux" --loader "/vmlinuz-linux" --unicode "root=PARTUUID=$PARTITION_PARTUUID rw initrd=\\$PROCESSOR-ucode.img initrd=\initramfs-linux.img"
            ;;
        *)
            echo "ERROR! efistub is not supported for BIOS systems"
            exit 0
            ;;
        esac
    fi
    ;;
"none")
    echo "Skipping bootloader installation"
    ;;
*)
    echo "ERROR! Unknown bootloader"
    exit 0
    ;;
esac

echo "Adding User and hostname"
if [ "$(id -u)" -eq "0" ]; then
    useradd -m -G wheel -s /bin/bash "$USERNAME"
    echo "$USERNAME:$USER_PASSWORD" | chpasswd
    if [[ "$DESKTOP" != "minimal" ]]; then
        cp -R "$SCRIPT_DIR" /home/"$USERNAME"/
        chown -R "$USERNAME": /home/"$USERNAME"/asai
    fi
    echo "$HOSTNAME" >>/etc/hostname
else
    echo "You are already a user proceed with aur installs"
fi
case "$LAYOUT" in
"lvm")
    echo "LVM hooks added"
    sed -i "/^HOOK/s/filesystems/${HOOKS[*]}/" /etc/mkinitcpio.conf
    ;;
"luks")
    echo "LUKS hooks added"
    sed -i "s/^HOOK.*/HOOKS=(${HOOKS[*]})/" /etc/mkinitcpio.conf
    ;;
"none")
    echo "Skipping hooks addition"
    ;;
*)
    echo "ERROR! No hooks added"
    exit 0
    ;;
esac

if [[ "$FILE_SYSTEM" =~ "btrfs" ]]; then
        echo "Btrfs module added"
        sed -i "/^MODULES=/s/(/($MODULES/" /etc/mkinitcpio.conf
fi

if [[ -f "/etc/mkinitcpio.conf" ]]; then
    # making mkinitcpio with linux kernel
    echo "Building initramfs"
    mkinitcpio -p linux
fi

title "System ready for 2-user.sh"
