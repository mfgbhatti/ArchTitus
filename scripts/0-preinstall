#!/usr/bin/env bash

make_boot() {
    if [[ "$UEFI" -eq "1" ]]; then
        mkfs.vfat -F32 -n "$BOOT" "$BOOT_PARTITION"
    fi
}


do_format() {
    echo -ne "Formating with $FILE_SYSTEM"
    case "$FILE_SYSTEM" in
    "xfs")
        mkfs.xfs -f -L "$ROOT" "$1"
        ;;
    "btrfs")
        mkfs.btrfs -L "$ROOT" "$1" -f
        ;;
    "ext4")
        mkfs.ext4 -E discard -F -L "$ROOT" "$1"
        ;;
    "vfat")
        mkfs.vfat -F32 "$1"
        ;;
    "f2fs")
        mkfs.f2fs -l "$ROOT" -O extra_attr,inode_checksum,sb_checksum "$1"
        ;;
    "ext2")
        mkfs.ext2 -L "$ROOT" "$1"
        ;;
    "ext3")
        mkfs.ext3 -L "$ROOT" "$1"
        ;;
    "jfs")
        mkfs.jfs -L "$ROOT" "$1"
        ;;
    "nilfs2")
        mkfs.nilfs2 -L "$ROOT" "$1"
        ;;
    "ntfs")
        mkfs.ntfs -Q -L "$ROOT" "$1"
        ;;
    *)
        echo "ERROR! Unsupported filesystem"
        exit 0
        ;;
    esac

}

do_btrfs() {
    do_formatc "$ROOT_PARTITION"
    mount -t btrfs "$ROOT_PARTITION" "$MOUNTPOINT"

    echo "Creating subvolumes and directories"
    for x in "${BTRFS_SUBVOLUMES[@]}"; do
        btrfs subvolume create "$MOUNTPOINT"/"${x}" >/dev/null 2>&1
    done

    umount /mnt
    mount -o "$MOUNTOPTION",subvol=@ "$ROOT_PARTITION" "$MOUNTPOINT" 

    if [[ "$SWAP" -eq "1" ]]; then
        echo -ne "Adding @swap to subvolumes\n"
        BTRFS_SUBVOLUMES+=("@swap")
    fi

    for VOL in "${BTRFS_SUBVOLUMES[@]:1}"; do
        DIR="${VOL//@/}"
        mkdir /mnt/"$DIR"
        mount -o "$MOUNTOPTION",subvol="$VOL" "$ROOT_PARTITION" "$MOUNTPOINT"/"$DIR"
    done
}

do_lvm() {
    i=0
    while [[ "$i" -lt "$LVM_PART_NUM" ]]; do
        if [[ "$LVM_PART_NUM" -eq "1" || "$PART_NUM" -eq "1" ]]; then
            echo -ne "Creating ${LVM_NAMES[$i]} with 100%FREE space\n"
            lvcreate --extents 100%FREE "$LVM_VG" --name "${LVM_NAMES[$i]}"
        else
            echo -ne "Creating ${LVM_NAMES[$i]} with ${LVM_SIZES[$i]} space\n"
            lvcreate --size "${LVM_SIZES[$i]}" "$LVM_VG" --name "${LVM_NAMES[$i]}"
        fi
        i=$((i + 1))
        PART_NUM=$((LVM_PART_NUM - 1))
    done
}

mount_lvm() {
    vgchange -ay &>/dev/null
    i=0
    while [[ "$i" -lt "$LVM_PART_NUM" ]]; do
        lvchange -ay /dev/"$LVM_VG"/"${LVM_NAMES[$i]}" >/dev/null 2>&1
        echo -ne "Formating /dev/$LVM_VG/${LVM_NAMES[$i]}\n"
        do_format /dev/"$LVM_VG"/"${LVM_NAMES[$i]}"

        i=$((i + 1))
    done
    mount -t "$FILE_SYSTEM" /dev/"$LVM_VG"/"${LVM_NAMES[0]}" "$MOUNTPOINT"
    if [[ "$LVM_PART_NUM" != "1" ]]; then
        for x in "${LVM_NAMES[@]:1}"; do
            mkdir "$MOUNTPOINT"/"$x"
            echo -ne "mounting /dev/$LVM_VG/$x on $MOUNTPOINT/$x with type $FILE_SYSTEM"
            mount -t "$FILE_SYSTEM" /dev/"$LVM_VG"/"$x" "$MOUNTPOINT"/"$x"
        done
    fi
}

prep_disk() {
    echo -ne "Preparing disk\n"
    wipefs -a -f "$DISK" >/dev/null 2>&1
    sgdisk -Z "$DISK"
    sgdisk -a 2048 -o "$DISK"
}

do_partition() {
    prep_disk
    echo -ne "Partitioning disk\n"
    if [[ "$UEFI" -eq "1" ]]; then
        sgdisk -n 1::+300M --typecode=1:ef00 --change-name=1:"$BOOT" "$DISK"
        sgdisk -n 2::-0 --typecode=2:8300 --change-name=2:"$ROOT" "$DISK"
    else
        sgdisk -n 1::+1M --typecode=1:ef02 --change-name=1:"BIOSBOOT" "$DISK"
        sgdisk -n 2::-0 --typecode=2:8300 --change-name=2:"$ROOT" "$DISK"
    fi
}

mount_boot() {
    if [[ "$UEFI" -eq "1" ]]; then
        echo "Mounting boot partition"
        mkdir "$MOUNTPOINT"/boot
        mount -t vfat "$BOOT_PARTITION" "$MOUNTPOINT"/boot/
    fi
}

title "Preinstall setup"
install_pkg pacman-contrib reflector rsync gptfdisk
echo "Modifying pacman.conf"
sed -i '/ParallelDownloads/s/^#//;/Color/s/^#//' /etc/pacman.conf

if [[ ! -f /etc/pacman.d/mirrorlist.backup ]]; then
    cp /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.backup
fi
echo "Generating new mirrorlist"
reflector --age 48 --country "$ISO" -f 5 --latest 20 --protocol https --sort rate --save /etc/pacman.d/mirrorlist
mkdir "$MOUNTPOINT" &>/dev/null

case "$LAYOUT" in
"btrfs")
    do_partition
    make_boot
    do_btrfs
    mount_boot
    ;;

"lvm")
    do_partition
    sgdisk --typecode=2:8e00 "$DISK"
    partprobe "$DISK"
    make_boot
    pvcreate "$ROOT_PARTITION"
    vgcreate "$LVM_VG" "$ROOT_PARTITION"
    do_lvm
    mount_lvm
    mount_boot
    ;;

"luks")
    do_partition
    make_boot
    echo -n "$LUKS_PASSWORD" | cryptsetup -y -v luksFormat "$ROOT_PARTITION" -
    echo -n "$LUKS_PASSWORD" | cryptsetup open "$ROOT_PARTITION" "$LUKS_PATH" -
    pvcreate /dev/mapper/"$LUKS_PATH"
    vgcreate "$LVM_VG" /dev/mapper/"$LUKS_PATH"
    do_lvm
    mount_lvm
    mount_boot
    ;;

"none")
    modprobe dm-mod
    vgscan &>/dev/null
    vgchange -ay &>/dev/null
    if [[ "$MANUAL_PART" -eq "1" ]]; then
        do_partition
        make_boot
        do_format "$ROOT_PARTITION"
    fi
    mount -t "$FILE_SYSTEM" "$ROOT_PARTITION" "$MOUNTPOINT"
    mount_boot
    ;;

*)
    echo "ERROR! Unsupported Partition layout"
    exit 0
    ;;
esac

if mount_check; then
    echo -ne "Mounting rechecked\n"
else
    echo -ne "ERROR! $MOUNTPOINT not mounted\n"
    exit 0
fi

echo "Starting pacstrap"
pacstrap "$MOUNTPOINT" "${PACKAGES[@]}" --noconfirm --needed >/dev/null 2>&1
echo "Registering keyserver"
echo "keyserver hkp://keyserver.ubuntu.com" >>"$MOUNTPOINT"/etc/pacman.d/gnupg/gpg.conf

echo "Generating fstab"
genfstab -U "$MOUNTPOINT" >>"$MOUNTPOINT"/etc/fstab

cp -R "$SCRIPT_DIR" "$MOUNTPOINT"/root/asai
cp /etc/pacman.d/mirrorlist "$MOUNTPOINT"/etc/pacman.d/mirrorlist

if [[ "$SWAP" -eq "1" ]]; then
    if [[ "$LAYOUT" =~ "btrfs" ]]; then
        SWAP_FILE_PATH="swap"
        echo "Setting COW"
        chattr +C "$MOUNTPOINT"/"$SWAP_FILE_PATH"
    else
        SWAP_FILE_PATH="opt/swap"
        mkdir -p "$MOUNTPOINT"/"$SWAP_FILE_PATH"
    fi
    echo "Creating swap file "
    dd if=/dev/zero of="$MOUNTPOINT"/"$SWAP_FILE_PATH"/swapfile bs=1M count=2048 status=progress >/dev/null 2>&1
    echo "Setting permissions"
    chmod 600 "$MOUNTPOINT"/"$SWAP_FILE_PATH"/swapfile
    chown root "$MOUNTPOINT"/"$SWAP_FILE_PATH"/swapfile
    echo "Making swap on"
    mkswap "$MOUNTPOINT"/"$SWAP_FILE_PATH"/swapfile >/dev/null 2>&1
    swapon "$MOUNTPOINT"/"$SWAP_FILE_PATH"/swapfile >/dev/null 2>&1
    echo -e "/$SWAP_FILE_PATH/swapfile\tnone     \tswap     \tsw\t0 0" >>"$MOUNTPOINT"/etc/fstab
fi
