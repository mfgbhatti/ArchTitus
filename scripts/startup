#!/usr/bin/env bash
# shellcheck disable=SC1087,SC2034

set_filesystem() {
    title "Setup File System"
    FILESYS=("btrfs" "ext2" "ext3" "ext4" "f2fs" "jfs" "nilfs2" "ntfs" "vfat" "xfs")
    PS3="$PROMPT"
    select OPT in "${FILESYS[@]}"; do
        if elements_present "$OPT" "${FILESYS[@]}"; then
            case "$OPT" in
            "xfs")
                set_option "PACKAGES" "xfsprogs"
                ;;
            "btrfs")
                set_option "PACKAGES" "btrfs-progs"
                ;;
            "f2fs")
                set_option "PACKAGES" "f2fs-tools"
                ;;
            "jfs")
                set_option "PACKAGES" "jfsutils"
                ;;
            "nilfs2")
                set_option "PACKAGES" "nilfs-utils"
                ;;
            "ntfs")
                set_option "PACKAGES" "ntfs-3g"
                ;;
            *) ;;
            esac
            set_option "FILE_SYSTEM" "$OPT"
            break
        else
            invalid_option
            set_filesystem
            break
        fi
    done
}

set_partion_layout() {
    title "Setup Partioning Layout"
    LAYOUTS=("Btrfs" "LVM" "LVM+LUKS" "Maintain Current")
    PS3="$PROMPT"
    select LAY in "${LAYOUTS[@]}"; do
        if elements_present "$LAY" "${LAYOUTS[@]}"; then
            case "$REPLY" in
            1)
                set_btrfs
                set_option "LAYOUT" "btrfs"
                set_option "FILE_SYSTEM" "btrfs"
                set_option "PACKAGES" "btrfs-progs"
                set_option "MODULES" "btrfs"

                break
                ;;
            2)
                set_option "LAYOUT" "lvm"
                set_option "PACKAGES" "lvm2"
                set_option "HOOKS" "(lvm2 filesystems)"
                set_filesystem
                set_lvm
                break
                ;;
            3)
                set_lvm
                read -rp "Enter the LUKS path [like luks or crypt]: " LUKS_PATH
                echo -ne "It will be /dev/mapper/luks or /dev/mapper/crypt\n"
                if [[ -z "$LUKS_PATH" ]]; then
                    set_option "LUKS_PATH" "luks"
                else
                    set_option "LUKS_PATH" "$LUKS_PATH"
                fi
                set_filesystem
                set_option "LAYOUT" "luks"
                set_password "LUKS_PASSWORD"
                set_option "PACKAGES" "lvm2 cryptsetup"
                set_option "HOOKS" "(base udev autodetect keyboard keymap consolefont modconf block lvm2 encrypt filesystems fsck)"
                break
                ;;
            4)
                echo -ne "Maintaining current settings\n"
                mapfile -t CHOICE <<<"$(lsblk | grep 'part' | awk '{print "/dev/" substr($1,3)}')"
                if [[ -d "/sys/firmware/efi/" ]]; then
                    echo -ne "Select your boot partition\n"
                    PS3="$PROMPT"
                    select BTP in "${CHOICE[@]}"; do
                        if elements_present "$BTP" "${CHOICE[@]}"; then
                            set_option "LAYOUT" "none"
                            set_option "BOOT_PARTITION" "$BTP"
                            break
                        fi
                    done
                fi
                echo -ne "Select your root partition\n"
                PS3="$PROMPT"
                select RTP in "${CHOICE[@]}"; do
                    if elements_present "$RTP" "${CHOICE[@]}"; then
                        set_option "ROOT_PARTITION" "$RTP"
                        break
                    fi
                done
                break
                ;;
            *)
                invalid_option
                set_partion_layout
                break
                ;;
            esac
        else
            invalid_option
            set_partion_layout
        fi
    done
}

# Added this from arch wiki https://wiki.archlinux.org/title/System_time
set_timezone() {
    title "Setup Time Zone"
    mapfile -t _ZONE <<<"$(timedatectl list-timezones | sed 's/\/.*$//' | uniq)"
    echo -ne "System detected your timezone to be '$_TIMEZONE'"
    echo " "
    read -r -p "Is this correct? [like yes/no]: " ANSWER
    case "$ANSWER" in
    y | Y | yes | Yes | YES)
        set_option "TIMEZONE" "$_TIMEZONE"
        ;;
    n | N | no | NO | No)
        title "Manually setting timezone"
        PS3="$PROMPT"
        echo -ne "Please select your zone: \n"
        select ZONE in "${_ZONE[@]}"; do
            if elements_present "$ZONE" "${_ZONE[@]}"; then
                mapfile -t _SUBZONE <<<"$(timedatectl list-timezones | grep "${ZONE}" | sed 's/^.*\///')"
                PS3="$PROMPT"
                echo -ne "Please select your subzone: \n"
                select SUBZONE in "${_SUBZONE[@]}"; do
                    if elements_present "$SUBZONE" "${_SUBZONE[@]}"; then
                        set_option "TIMEZONE" "${ZONE}/${SUBZONE}"
                        break
                    else
                        invalid_option
                        break
                    fi
                done
                break
            else
                invalid_option
                set_timezone
                break
            fi
        done
        ;;

    *)
        invalid_option
        set_timezone
        ;;
    esac
}

set_keymap() {
    title "Setup Keymap"
    mapfile -t KEYMAPS <<<"$(localectl list-keymaps | grep -E "^[a-z]{2}$")"
    PS3="$PROMPT"
    select MAP in "${KEYMAPS[@]}"; do
        if elements_present "$MAP" "${KEYMAPS[@]}"; then
            localectl --no-ask-password set-keymap --no-convert "$MAP"
            set_option "KEYMAP" "$MAP"
            break
        else
            invalid_option
            set_keymap
            break
        fi
    done
}

disk_selection() {
    title "Disk Selection"
    mapfile -t DISKLIST <<<"$(lsblk -n --output TYPE,KNAME,SIZE | awk '$1=="disk"{print "/dev/"$2" - "$3}')"
    PS3="$PROMPT"
    select _DISK in "${DISKLIST[@]}"; do
        if elements_present "$_DISK" "${DISKLIST[@]}"; then
            DISK=$(echo "$_DISK" | awk '{print $1}')
            set_option "DISK" "$DISK"
            if [[ "$(lsblk -n --output TYPE,ROTA | awk '$1=="disk"{print $2}')" -eq "0" ]]; then
                set_option "SSD" 1
                set_option "BOOT_PARTITION" "${DISK}p1"
                set_option "ROOT_PARTITION" "${DISK}p2"
                set_option "MOUNTOPTION" "noatime,compress=zstd,ssd,commit=120"
            else
                set_option "SSD" 0
                set_option "MOUNTOPTION" "noatime,compress=zstd,commit=120"
                set_option "BOOT_PARTITION" "${DISK}1"
                set_option "ROOT_PARTITION" "${DISK}2"
            fi
            break
        else
            invalid_option
            disk_selection
            break
        fi
    done
}

user_info() {
    title "Add Your Information"
    while true; do
        read -r -p "Please enter your username [default is asai]: " USERNAME
        if [[ -z "$USERNAME" ]]; then
            set_option "USERNAME" "asai"
            break
        elif [[ "${USERNAME,,}" =~ ^[a-z_]([a-z0-9_-]{0,31}|[a-z0-9_-]{0,30}\$)$ ]]; then
            set_option "USERNAME" "${USERNAME,,}"
            break
        else
            invalid_option
            continue
        fi
    done
    set_password "USER_PASSWORD"
    while true; do
        read -r -p "Please enter your hostname [default is archlinux]: " HOSTNAME
        if [[ -z "$HOSTNAME" ]]; then
            set_option "HOSTNAME" "archlinux"
            break
        elif [[ "${HOSTNAME,,}" =~ ^[a-z][a-z0-9_.-]{0,62}[a-z0-9]$ ]]; then
            set_option "HOSTNAME" "${HOSTNAME,,}"
            break
        else
            invalid_option
            continue
        fi
    done
}

set_locale() {
    title "Setup Locale"
    select_locale() {
        select LOCALE in "$@"; do
            if elements_present "$LOCALE" "$@"; then
                x=2
                while [[ "$x" -le "$GROUP" ]]; do
                    REG="Load $x[a-z]* List"
                    if [[ "$LOCALE" =~ $REG ]]; then
                        NAME="LOCALES$x[@]" # SC1087
                        select_locale "${!NAME}"
                    fi
                    x=$((x + 1))
                done
                set_option "LOCALE" "$LOCALE"
                break
            else
                invalid_option
                set_locale
                break
            fi
        done
    }
    mapfile -t LOCALES <<<"$(grep UTF-8 /etc/locale.gen | sed 's/\..*$//' | sed '/@/d' | awk '{print $1}' | uniq | sed 's/#//g')"
    GROUP=6
    SIZE=$((${#LOCALES[@]} / GROUP - 1))
    LOCALES1=("Load 2nd List" "${LOCALES[@]:1:$SIZE}") # SC2034
    LOCALES2=("Load 3rd List" "${LOCALES[@]:50:$SIZE}")
    LOCALES3=("Load 4th List" "${LOCALES[@]:100:$SIZE}")
    LOCALES4=("Load 5th List" "${LOCALES[@]:150:$SIZE}")
    LOCALES5=("Load 6th List" "${LOCALES[@]:200:$SIZE}")
    LOCALES6=("${LOCALES[@]:250:((${#LOCALES[@]} - 1))}")
    PS3="$PROMPT"
    select_locale "${LOCALES1[@]}"
}

set_aur_helper() {
    title "Select your preferred AUR helper"
    SELECTION=("yay" "trizen" "aurman" "aura" "pikaur" "none")
    PS3="$PROMPT"
    select AUR in "${SELECTION[@]}"; do
        if elements_present "$AUR" "${SELECTION[@]}"; then
            set_option "AURHELPER" "$AUR"
            break
        else
            invalid_option
            set_aur_helper
            break
        fi
    done
}

set_desktop() {
    title "Select either desktop Environment or Window Manager"
    SELECTION=("Gnome" "KDE" "XFCE" "Mate" "LXQT" "Minimal" "Awesome" "OpenBox" "i3" "i3-Gaps" "Deepin" "Budgie")
    PS3="$PROMPT"
    select DES in "${SELECTION[@]}"; do
        if elements_present "$DES" "${SELECTION[@]}"; then
            if [[ "$DES" != "Minimal" ]]; then
                set_aur_helper
            fi
            set_option "DESKTOP" "${DES,,}"
            break

        else
            invalid_option
            set_desktop
            break
        fi
    done

}

set_kernel() {
    title "Choose your preferred kernel"
    SELECTION=("linux" "linux-lts" "linux-zen" "linux-hardened")
    PS3="$PROMPT"
    select KERNEL in "${SELECTION[@]}"; do
        if elements_present "$KERNEL" "${SELECTION[@]}"; then
            if [[ "$KERNEL" != "linux" ]]; then
                set_option "PACKAGES" "$KERNEL"
                POSTFIX=$(echo "$KERNEL" | awk 'BEGIN { FS="-" }; {print "-"$2}')
                set_option "KERNEL_POSTFIX" "$POSTFIX"
            else
                set_option "PACKAGES" "linux"
            fi
            break
        else
            invalid_option
            set_kernel
            break
        fi
    done
}

set_grub_theme() {
    title "Choose your preferred GRUB theme"
    SELECTION=("CyberRe" "Cyberpunk" "Shodan" "Vimix" "Xenlism" "None")
    PS3="$PROMPT"
    select THM in "${SELECTION[@]}"; do
        if elements_present "$THM" "${SELECTION[@]}"; then
            set_option "GRUBTHEME" "${THM}"
            set_option "THEMEDIR" "/boot/grub/themes"
            break
        else
            invalid_option
            set_grub_theme
            break
        fi
    done
}

set_bootloader() {
    title "Select your bootloader"
    SELECTION=("GRUB" "Systemd" "EFISTUB" "None")
    echo "Systemd and UEFI are only available on a UEFI system"
    echo "None will skip a bootloader and you will not be able to boot"
    PS3="$PROMPT"
    select BLDR in "${SELECTION[@]}"; do
        if elements_present "$BLDR" "${SELECTION[@]}"; then
            if [[ "$BLDR" =~ "GRUB" ]]; then
                set_option "BOOTLOADER" "${BLDR,,}"
                set_grub_theme
                break
            fi
            set_option "BOOTLOADER" "${BLDR,,}"
            break
        else
            invalid_option
            set_bootloader
            break
        fi
    done
}

run_tasks() {
    do_curl
    efi_check
    hardware_check
    smart_checks
}

make_choice() {
    run_tasks
    logo
    set_keymap
    set_timezone
    user_info
    logo
    set_locale
    disk_selection
    # Advance options
    logo
    set_partion_layout
    logo
    set_kernel
    set_desktop
    logo
    set_bootloader
}

make_choice
# set_keymap
